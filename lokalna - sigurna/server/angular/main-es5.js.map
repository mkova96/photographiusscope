{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_common/error.interceptor.ts","webpack:///src/app/_common/password-policy.ts","webpack:///src/app/_common/rbac-allow.directive.ts","webpack:///src/app/_common/routes.config.ts","webpack:///src/app/_common/user-search.validator.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/app/_services/authentication.guard.ts","webpack:///src/app/_services/authorization.guard.ts","webpack:///src/app/_services/message.service.ts","webpack:///src/app/_services/photograph.service.ts","webpack:///src/app/_services/photographerService.ts","webpack:///src/app/_services/transaction.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/message/add-message/add-message.component.ts","webpack:///src/app/message/add-message/add-message.component.html","webpack:///src/app/message/messages/messages.component.ts","webpack:///src/app/message/messages/messages.component.html","webpack:///src/app/photograph/add-photograph/add-photograph.component.ts","webpack:///src/app/photograph/add-photograph/add-photograph.component.html","webpack:///src/app/photograph/edit-photograph/edit-photograph.component.ts","webpack:///src/app/photograph/edit-photograph/edit-photograph.component.html","webpack:///src/app/photograph/my-photographs/my-photographs.component.ts","webpack:///src/app/photograph/my-photographs/my-photographs.component.html","webpack:///src/app/photograph/photographs/photographs.component.ts","webpack:///src/app/photograph/photographs/photographs.component.html","webpack:///src/app/photographer/add-photographer/add-photographer.component.ts","webpack:///src/app/photographer/add-photographer/add-photographer.component.html","webpack:///src/app/photographer/edit-photographer/edit-photographer.component.ts","webpack:///src/app/photographer/edit-photographer/edit-photographer.component.html","webpack:///src/app/photographer/photographers/photographers.component.ts","webpack:///src/app/photographer/photographers/photographers.component.html","webpack:///src/app/signup/signup.component.ts","webpack:///src/app/signup/signup.component.html","webpack:///src/app/transaction/add-transaction/add-transaction.component.ts","webpack:///src/app/transaction/add-transaction/add-transaction.component.html","webpack:///src/app/transaction/mytransactions/mytransactions.component.ts","webpack:///src/app/transaction/mytransactions/mytransactions.component.html","webpack:///src/app/users/users.component.ts","webpack:///src/app/users/users.component.html","webpack:///src/app/welcome/welcome.component.ts","webpack:///src/app/welcome/welcome.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ErrorInterceptor","toasterService","next","handle","pipe","err","error","positionClass","timeOut","PasswordPolicy","regex","control","value","valid","test","password","get","confirmPassword","setErrors","NoPassswordMatch","pass","includes","RbacAllowDirective","templateRef","viewContainer","authService","sub","user$","subscribe","user","showIfUserAllowed","unsubscribe","allowedRole","clear","role","createEmbeddedView","selector","routesConfig","path","component","canActivate","redirectTo","pathMatch","validSearch","toString","toLowerCase","ANONYMOUS_USER","undefined","email","money","firstName","lastName","profileLink","AuthService","http","subject","asObservable","isLoggedIn$","isLoggedOut$","isLoggedIn","post","input","captcha","AuthenticationGuard","router","route","state","allowed","navigateByUrl","AuthorizationGuard","MessageService","content","receiverEmail","PhotographService","address","name","photographerId","year","price","put","PhotographerService","age","TransactionService","amount","AppComponent","title","a","loggedUser$","logout","successMessage","success","setTimeout","errorMessage","templateUrl","styleUrls","createAdminOnlyGuard","createUserOnlyGuard","createAuthenticationGuard","AppModule","provide","useFactory","deps","useClass","multi","withOptions","cookieName","headerName","forRoot","declarations","imports","providers","bootstrap","LoginComponent","fb","error_messages","type","message","form","group","compose","required","minLength","maxLength","pattern","recaptchaReactive","validators","bind","captchaResponse","sendTokenToBackend","tok","validateCaptcha","data","cap","robot","val","login","resolved","AddMessageComponent","messageService","transactionService","sanitizer","users$","getAllUsers","addMessage","sendMessage","MessagesComponent","contents","messages$","getMessages","text","bypassSecurityTrustUrl","AddPhotographComponent","photographService","photographerService","min","max","photographers$","getPhotographers","addPhotograph","createPhotograph","EditPhotographComponent","paramMap","params","photographId","parseInt","load","onlyTasks","getPhotograph","photograph","photoLink","photographer","userId","editPhotograph","MyPhotographsComponent","photos$","getMyPhotographs","sellPhotograph","location","reload","PhotographsComponent","ipaddress","getPhotographs","deletePhotograph","buyPhotograph","ping","resp","response","AddPhotographerComponent","addPhotographer","createPhotographer","EditPhotographerComponent","getPhotographer","editPhotographer","PhotographersComponent","deletePhotographer","SignupComponent","formBuilder","frmSignup","createSignupForm","signUp","patternValidator","hasNumber","hasCapitalCase","hasSmallCase","checkTop1000","goodPass","validator","passwordMatchValidator","submit","AddTransactionComponent","sendMoney","MyTransactionsComponent","transactions$","getTransactions","UsersComponent","search","getUsers","WelcomeComponent","environment","production","bootstrapModule","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable, throwError,of } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n  constructor(public toasterService: ToastrService) {}\r\n\r\n  intercept(req: HttpRequest<any>,next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n        catchError((err: any) => {\r\n            if(err instanceof HttpErrorResponse) {\r\n              this.toasterService.error(err.error.error, 'Error', { positionClass: 'toast-top-center' ,timeOut:5000});\r\n            }\r\n            return of(err);\r\n        }));\r\n  }\r\n  \r\n}","import { ValidationErrors, ValidatorFn, AbstractControl } from '@angular/forms';\n\nexport class PasswordPolicy {\n\n  static pass:string[] = [\"1v7Upjw3nT\",\"YAgjecc826\",\"a838hfiD\",\"PolniyPizdec0211\",\"Password1\",\"Sojdlg123aljg\",\n    \"j38ifUbn\",\"3rJs1la7qE\",\"iw14Fi9j\"]\n\n    static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } => {\n          if (!control.value) {\n            // if control is empty return no error\n            return null;\n          }\n      \n          // test the value of the control against the regexp supplied\n          const valid = regex.test(control.value);\n      \n          // if true, return no error (no error), else return error passed in the second parameter\n          return valid ? null : error;\n        };\n    }\n\n    static passwordMatchValidator(control: AbstractControl) {\n        const password: string = control.get('password').value; // get password from our password form control\n        const confirmPassword: string = control.get('confirmPassword').value; // get password from our confirmPassword form control\n        // compare is the password math\n        if (password !== confirmPassword) {\n          // if they don't match, set an error in our confirmPassword form control\n          control.get('confirmPassword').setErrors({ NoPassswordMatch: true });\n        }\n    }\n\n    static checkTop1000(error: ValidationErrors): ValidatorFn {\n      return (control: AbstractControl): { [key: string]: any } => {\n        if (!control.value) {\n          // if control is empty return no error\n          return null;\n        }\n    \n        const valid = this.pass.includes(control.value)      \n    \n        // if true, return no error (no error), else return error passed in the second parameter\n        return valid ? error : null;\n      };\n  }\n}\n","import { Directive, OnDestroy, TemplateRef, ViewContainerRef, Input } from '@angular/core';\nimport { User } from '../_models/user';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport * as _ from 'lodash';\n\n\n@Directive({\n    selector:\"[rbacAllow]\"\n})\nexport class RbacAllowDirective implements OnDestroy {\n\n    allowedRole:string;\n    user:User;\n\n    sub:Subscription;\n\n    constructor(private templateRef: TemplateRef<any>,private viewContainer: ViewContainerRef,\n        private authService: AuthService) {\n\n        this.sub = authService.user$.subscribe(\n            user => {\n                this.user = user;\n                this.showIfUserAllowed();\n            });\n    }\n\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    @Input()\n    set rbacAllow(allowedRole: string) {\n        this.allowedRole = allowedRole;\n        this.showIfUserAllowed();\n    }\n\n    showIfUserAllowed() {\n\n        if (!this.allowedRole || !this.user) {\n            this.viewContainer.clear();\n            return;\n        }\n\n        if (this.allowedRole == this.user.role) {\n            this.viewContainer.createEmbeddedView(this.templateRef);\n        }\n        else {\n            this.viewContainer.clear();\n        }\n\n    }\n\n}","import {Routes} from '@angular/router';\nimport {LoginComponent} from \"../login/login.component\";\nimport {SignupComponent} from \"../signup/signup.component\";\nimport {AddTransactionComponent} from \"../transaction/add-transaction/add-transaction.component\";\nimport {MyTransactionsComponent} from \"../transaction/mytransactions/mytransactions.component\";\nimport { PhotographersComponent } from '../photographer/photographers/photographers.component';\nimport { AddPhotographerComponent } from '../photographer/add-photographer/add-photographer.component';\nimport { EditPhotographerComponent } from '../photographer/edit-photographer/edit-photographer.component';\nimport { PhotographsComponent } from '../photograph/photographs/photographs.component';\nimport { AddPhotographComponent } from '../photograph/add-photograph/add-photograph.component';\nimport { EditPhotographComponent } from '../photograph/edit-photograph/edit-photograph.component';\nimport { MyPhotographsComponent } from '../photograph/my-photographs/my-photographs.component';\nimport { MessagesComponent } from '../message/messages/messages.component';\nimport { AddMessageComponent } from '../message/add-message/add-message.component';\nimport { UsersComponent } from '../users/users.component';\nimport { WelcomeComponent } from '../welcome/welcome.component';\n\n\nexport const routesConfig: Routes = [\n    \n/*********************************************** */\n    {\n        path: 'photographs',\n        component: PhotographsComponent,\n        canActivate:[\"authenticationGuard\"]\n    },\n    {\n        path: 'myphotographs',\n        component: MyPhotographsComponent,\n        canActivate: [\"usersOnlyGuard\"]\n    },\n    {\n        path: 'photographs/add',\n        component: AddPhotographComponent,\n        canActivate: [\"adminsOnlyGuard\"]\n    },\n    {\n        path: 'photographs/:id',\n        component: EditPhotographComponent,\n        canActivate: [\"adminsOnlyGuard\"]\n    },\n/*********************************************** */\n    {\n        path: 'photographers',\n        component: PhotographersComponent,\n        canActivate:[\"adminsOnlyGuard\"]\n    },\n    {\n        path: 'photographers/add',\n        component: AddPhotographerComponent,\n        canActivate: [\"adminsOnlyGuard\"]\n    },\n    {\n        path: 'photographers/:id',\n        component: EditPhotographerComponent,\n        canActivate: [\"adminsOnlyGuard\"]\n    },\n/*********************************************** */\n\n    {\n        path: 'messages',\n        component: MessagesComponent,\n        canActivate: [\"usersOnlyGuard\"]\n    },\n    {\n        path: 'messages/add',\n        component: AddMessageComponent,\n        canActivate: [\"usersOnlyGuard\"]\n    },\n\n/*********************************************** */\n    \n    {\n        path: 'transactions',\n        component: MyTransactionsComponent,\n        canActivate:[\"authenticationGuard\"]\n    },\n    {\n        path: 'transaction',\n        component: AddTransactionComponent,\n        canActivate: [\"usersOnlyGuard\"]\n    },\n/*********************************************** */\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n\n    {\n        path: 'signup',\n        component: SignupComponent\n    },\n    /*********************************************** */\n    {\n        path: 'users',\n        component: UsersComponent,\n        canActivate:[\"authenticationGuard\"]\n    },\n    {\n        path: 'welcome',\n        component: WelcomeComponent\n    },\n    {\n        path: '',\n        redirectTo:'/welcome',\n        pathMatch: 'full'\n    },\n    {\n        path: '**',\n        redirectTo: '/welcome',\n        pathMatch: 'full'\n    }    \n];","import { FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\n  export function validSearch():ValidatorFn{\r\n    return (control: AbstractControl): {[key: string]: any} | null => {\r\n\r\n        if(control.value.toString().includes(';') || control.value.toString().includes('--') || control.value.toString().includes('=')\r\n        || control.value.toString().toLowerCase().includes('insert') || control.value.toString().toLowerCase().includes('drop table') || /\\d/.test(control.value.toString())){\r\n\r\n            return {validSearch: true};            \r\n        }else{\r\n\r\n            return null;\r\n        }\r\n  }\r\n}\r\n","import {tap, shareReplay, map, filter} from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable, BehaviorSubject} from \"rxjs\";\nimport {User} from \"../_models/user\";\n\nexport const ANONYMOUS_USER : User = {\n    id: undefined,\n    email: '',\n    money:undefined,\n    firstName:'',\n    lastName:'',\n    profileLink:'',\n    role:''\n}\n\n\n@Injectable()\nexport class AuthService {\n\n   private subject = new BehaviorSubject<User>(undefined);\n   user$: Observable<User> = this.subject.asObservable().pipe(filter(user => !!user));;\n   isLoggedIn$: Observable<boolean> = this.user$.pipe(map(user => !!user.id));\n   isLoggedOut$: Observable<boolean> = this.isLoggedIn$.pipe(map(isLoggedIn => !isLoggedIn));\n\n    constructor(private http: HttpClient) {\n        http.get<User>('/api/user').subscribe(user => this.subject.next(user ? user : ANONYMOUS_USER));\n    }\n\n\n    signUp(email:string, password:string,firstName:string,lastName:string,profileLink:string ) {      \n      return this.http.post<User>('/api/signup', {email, password,firstName,lastName,profileLink}).pipe(\n          shareReplay(),tap(user => this.subject.next(user)),);\n    }\n\n    login(email:string, password:string ) {\n        return this.http.post<User>('/api/login', {email, password}).pipe(shareReplay(),tap(user => this.subject.next(user)),);\n    }\n\n    logout() : Observable<any> {\n        return this.http.post('/api/logout', null).pipe(shareReplay(),tap(user => this.subject.next(ANONYMOUS_USER)));\n    }\n\n    getAllUsers() : Observable<User[]> {\n        return this.http.get<User[]>('/api/users-all');\n    }\n\n    getUsers(input:string) : Observable<User[]> {\n        return this.http.post<any>(`/api/users`,{input});\n    }\n\n    validateCaptcha(captcha: string) {\n        return this.http.post<any>('/api/validatecaptcha', {captcha});\n    }\n}\n\n\n\n\n\n","import { AuthService } from './auth.service';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, first, tap } from 'rxjs/operators';\r\nimport * as _ from 'lodash';\r\n\r\nexport class AuthenticationGuard implements  CanActivate {\r\n    \r\n    constructor(private authService:AuthService, private router:Router) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot,state: RouterStateSnapshot): Observable<boolean>  {\r\n        return this.authService.user$.pipe(\r\n\r\n            map(user => user.id != undefined),\r\n            first(),\r\n            tap(allowed => {\r\n                if (!allowed) {\r\n                    this.router.navigateByUrl('/');\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}","import { AuthService } from './auth.service';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, first, tap } from 'rxjs/operators';\nimport * as _ from 'lodash';\n\nexport class AuthorizationGuard implements  CanActivate {\n    constructor(private allowedRole:string,private authService:AuthService, private router:Router) {}\n\n    canActivate(route: ActivatedRouteSnapshot,state: RouterStateSnapshot): Observable<boolean>  {\n        return this.authService.user$.pipe(\n\n            map(user => this.allowedRole == user.role),\n            first(),\n            tap(allowed => {\n                if (!allowed) {\n                    this.router.navigateByUrl('/');\n                }\n            }),\n        );\n    }\n}","import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport { Message } from '@angular/compiler/src/i18n/i18n_ast';\n\n\n@Injectable()\nexport class MessageService {\n\n    constructor(private http: HttpClient) {}\n\n    getMessages() : Observable<Message[]> {\n        return this.http.get<Message[]>('/api/messages');\n    }\n\n    addMessage(content:string,receiverEmail:number){ \n        return this.http.post<Message>('/api/addmessage',{content,receiverEmail}).pipe(\n            shareReplay(),tap()\n        );\n    }\n}","import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport { Photograph } from '../_models/photograph';\n\n\n@Injectable()\nexport class PhotographService {\n\n    constructor(private http: HttpClient) {}\n\n    getPhotographs() : Observable<Photograph[]> {\n        return this.http.get<Photograph[]>(`/api/photographs`);\n    }\n\n    getMyPhotographs() : Observable<Photograph[]> {\n        return this.http.get<Photograph[]>(`/api/myphotographs`);\n    }\n\n    getPhotograph(id:number) : Observable<Photograph> {\n        var address='/api/photographs/'+id.toString(); \n        return this.http.get<Photograph>(address);\n    }\n\n    addPhotograph(name:string,photographerId:number,year:number,price:number){\n        return this.http.post<Photograph>('/api/addphotograph',{name,photographerId,year,price}).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n    editPhotograph(id:number,name:string,photographerId:number,year:number,price:number){  \n        var address='/api/photographs/'+id.toString();   \n        return this.http.put<Photograph>(address,{id,name,photographerId,year,price}).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n    deletePhotograph(id:number){  \n        var address='/api/photographs/'+id.toString();       \n        return this.http.delete<any>(address).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n    buyPhotograph(id:number){  \n        var address=`/api/buyphotograph/`+id.toString();       \n        return this.http.post<Photograph>(address,{id}).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n    sellPhotograph(id:number){  \n        var address=`/api/sellphotograph/`+id.toString();       \n        return this.http.post<Photograph>(address,{id}).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n    ping(input:string) {\n        return this.http.post<any>('/api/ping',{input});\n    }\n\n}","import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { Photographer } from '../_models/photographer';\nimport { shareReplay, tap } from 'rxjs/operators';\n\n\n@Injectable()\nexport class PhotographerService {\n\n    constructor(private http: HttpClient) {\n\n\n    }\n\n    getPhotographers() : Observable<Photographer[]> {\n        return this.http.get<Photographer[]>('/api/photographers');\n    }\n\n    getPhotographer(id:number) : Observable<Photographer> {\n        var address='/api/photographers/'+id.toString(); \n        return this.http.get<Photographer>(address);\n    }\n\n    addPhotographer(firstName:string,lastName:string,age:number){      \n        return this.http.post<Photographer>('/api/addphotographer',{firstName,lastName,age}).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n    editPhotographer(id:number,firstName:string,lastName:string,age:number){   \n        var address='/api/photographers/'+id.toString();   \n        return this.http.put<Photographer>(address,{id,firstName,lastName,age}).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n    deletePhotographer(id:number){  \n        var address='/api/photographers/'+id.toString();       \n        return this.http.delete<any>(address).pipe(\n            shareReplay(),tap()\n        );\n    }\n\n}","import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, tap } from 'rxjs/operators';\nimport { Transaction } from '../_models/transaction';\n\n\n@Injectable()\nexport class TransactionService {\n\n    constructor(private http: HttpClient) {}\n\n    sendMoney(receiverEmail:string, amount:number, password:string) {\n        return this.http.post<Transaction>('/api/sendmoney', {receiverEmail, amount,password}).pipe(\n            shareReplay(),tap()\n        );\n    } \n\n    getTransactions():Observable<Transaction[]> {\n        return this.http.get<Transaction[]>('/api/transactions');\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './_services/auth.service';\nimport { User } from './_models/user';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  title = 'TestApp';\n\n  isLoggedIn$: Observable<boolean>;\n  isLoggedOut$: Observable<boolean>;\n\n  loggedUser$:Observable<User>;\n  email:string;\n  money:number;\n  errorMessage:string;\n  successMessage:string;\n\n  constructor(private authService:AuthService,private router:Router,public toasterService: ToastrService) {\n    this.authService.user$.subscribe(a=>this.email=a.email);\n    this.authService.user$.subscribe(a=>this.money=a.money);\n  }\n\n\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isLoggedIn$;\n    this.isLoggedOut$ = this.authService.isLoggedOut$;\n    this.loggedUser$=this.authService.user$;\n  }\n\n  logout() {\n\n    this.authService.logout()\n    .subscribe(\n      () => {\n          this.successMessage=\"You have been successfully logged out\";\n          this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n\n          setTimeout(() => {\n            this.router.navigateByUrl('welcome');\n        }, 1500);\n      },\n      err => {\n          this.errorMessage = err.error.error;\n      }\n    );\n  }\n}\n","<header class=\"l-header\">\n\n  <header class=\"l-header\">\n    <ul class=\"top-menu disable-link-styles\">\n         <li *ngIf=\"isLoggedOut$ | async\">\n              <a routerLink=\"/signup\">Sign Up</a>\n          </li>\n          <li *ngIf=\"isLoggedOut$ | async\">\n              <a routerLink=\"/login\">Login</a>\n          </li>\n            <li *rbacAllow=\"['ADMIN']\">\n              <a routerLink=\"/photographers\">Photographers</a>\n            </li>\n          <li *ngIf=\"isLoggedIn$ | async\">\n            <a routerLink=\"/photographs\">Photographs</a>\n          </li>\n          <li *rbacAllow=\"['USER']\">\n            <a routerLink=\"/myphotographs\">My Photographs</a>\n          </li>\n          <li *rbacAllow=\"['USER']\">\n            <a routerLink=\"/transactions\">Transactions</a>\n          </li>\n          <li *rbacAllow=\"['ADMIN']\">\n            <a routerLink=\"/transactions\">Transactions</a>\n          </li>\n          <li *rbacAllow=\"['USER']\">\n            <a routerLink=\"/messages\">Messages</a>\n          </li>\n          <li *ngIf=\"isLoggedIn$ | async\">\n            <a routerLink=\"/users\">Users</a>\n          </li>\n          <li *ngIf=\"isLoggedIn$ | async\">\n            <a>{{(loggedUser$ | async).email}}</a>\n          </li>\n          <li *rbacAllow=\"['USER']\">\n            <a>{{(loggedUser$ | async).money}}$</a>\n          </li>\n          <li *ngIf=\"isLoggedIn$ | async\" (click)=\"logout()\">\n            <a>Logout</a>\n          </li>\n    </ul>\n  </header>\n</header>\n<main>\n  <router-outlet></router-outlet>\n\n</main>\n\n\n\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClientModule, HttpClientXsrfModule, HTTP_INTERCEPTORS} from '@angular/common/http';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport {routesConfig} from \"./_common/routes.config\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\n\nimport { AppComponent } from './app.component';\nimport { AuthService } from './_services/auth.service';\nimport { TransactionService } from './_services/transaction.service';\nimport { PhotographService } from './_services/photograph.service';\nimport { MessageService } from './_services/message.service';\n\nimport {Router, RouterModule} from \"@angular/router\";\n\nimport { AddTransactionComponent } from './transaction/add-transaction/add-transaction.component';\nimport { MyTransactionsComponent } from './transaction/mytransactions/mytransactions.component';\nimport { PhotographersComponent } from './photographer/photographers/photographers.component';\nimport { PhotographerService } from './_services/photographerService';\nimport { AddPhotographerComponent } from './photographer/add-photographer/add-photographer.component';\nimport { EditPhotographerComponent } from './photographer/edit-photographer/edit-photographer.component';\nimport { PhotographsComponent } from './photograph/photographs/photographs.component';\nimport { AddPhotographComponent } from './photograph/add-photograph/add-photograph.component';\nimport { EditPhotographComponent } from './photograph/edit-photograph/edit-photograph.component';\nimport { MyPhotographsComponent } from './photograph/my-photographs/my-photographs.component';\nimport { AddMessageComponent } from './message/add-message/add-message.component';\nimport { MessagesComponent } from './message/messages/messages.component';\nimport { UsersComponent } from './users/users.component';\nimport { AuthorizationGuard } from './_services/authorization.guard';\nimport { AuthenticationGuard } from './_services/authentication.guard';\nimport { ErrorInterceptor } from './_common/error.interceptor';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { RbacAllowDirective } from './_common/rbac-allow.directive';\nimport { RecaptchaModule, RecaptchaFormsModule } from 'ng-recaptcha';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';\n\n\nexport function createAdminOnlyGuard(authService:AuthService, router:Router) {\n  return new AuthorizationGuard('ADMIN', authService, router);\n}\nexport function createUserOnlyGuard(authService:AuthService, router:Router) {\nreturn new AuthorizationGuard('USER', authService, router);\n}\nexport function createAuthenticationGuard(authService:AuthService, router:Router) {\nreturn new AuthenticationGuard(authService, router);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignupComponent,\n    AddTransactionComponent,\n    MyTransactionsComponent,\n    PhotographersComponent,\n    AddPhotographerComponent,\n    EditPhotographerComponent,\n    PhotographsComponent,\n    AddPhotographComponent,\n    EditPhotographComponent,\n    MyPhotographsComponent,\n    AddMessageComponent,\n    MessagesComponent,\n    UsersComponent,\n    WelcomeComponent,\n    RbacAllowDirective\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'x-xsrf-token'\n    }),\n    RouterModule.forRoot(routesConfig),\n    ReactiveFormsModule,\n    RecaptchaModule,  //this is the recaptcha main module\n    RecaptchaFormsModule, //this is the module for form incase form validation\n    BrowserAnimationsModule, // required animations module\n    ToastrModule.forRoot() // ToastrModule added\n  ],\n  providers: [AuthService, TransactionService, PhotographerService,PhotographService,MessageService,\n    {\n      provide: 'adminsOnlyGuard',\n      useFactory: createAdminOnlyGuard,\n      deps: [\n          AuthService,\n          Router\n      ]\n    },\n    {\n      provide: 'usersOnlyGuard',\n      useFactory: createUserOnlyGuard,\n      deps: [\n          AuthService,\n          Router\n      ]\n    },\n    {\n      provide: 'authenticationGuard',\n      useFactory: createAuthenticationGuard,\n      deps: [\n          AuthService,\n          Router\n      ]\n    },\n    { \n      provide: HTTP_INTERCEPTORS, \n      useClass: ErrorInterceptor,\n       multi: true\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators, FormControl} from \"@angular/forms\";\nimport { AuthService } from '../_services/auth.service';\nimport {Router} from \"@angular/router\";\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n    form:FormGroup;\n    errorMessage:string;\n    successMessage:string;\n    cap:boolean;\n\n    error_messages = {\n        'email': [\n          { type: 'required', message: 'Email is required.' },\n          { type: 'minlength', message: 'Email length.' },\n          { type: 'maxlength', message: 'Email length.' },\n          { type: 'pattern', message: 'please enter a email address of a proper type.' }\n        ],\n        'password': [\n          { type: 'required', message: 'password is required.' },\n          { type: 'minlength', message: 'password length.' },\n          { type: 'maxlength', message: 'password length.' }\n        ],\n        'captcha': [\n            { type: 'required', message: 'captcha is required.' }\n        ]\n    }\n\n    constructor(private fb:FormBuilder, private authService: AuthService, private router: Router,public toasterService: ToastrService) {\n\n        this.form = this.fb.group({\n            email: new FormControl('', Validators.compose([\n                Validators.required,\n                Validators.minLength(6),\n                Validators.maxLength(30),\n                Validators.pattern(\"[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}\"),\n                Validators.email\n              ])),\n            password: new FormControl('', Validators.compose([\n                Validators.required,\n                Validators.minLength(8),\n                Validators.maxLength(30)\n            ])),\n            \n            recaptchaReactive: new FormControl('', Validators.compose([\n                Validators.required,\n            ]))\n            }, { \n          validators: this.captcha.bind(this)\n        });\n\n    }\n\n    ngOnInit() {\n    }\n\n    //function to resolve the reCaptcha and retrieve a token\n    async resolved(captchaResponse: string) {\n        this.sendTokenToBackend(captchaResponse); //declaring the token send function with a token parameter\n    }\n  \n    //function to send the token to the node server\n    sendTokenToBackend(tok){\n\n        //calling the service and passing the token to the service\n        this.authService.validateCaptcha(tok).subscribe(\n        data => {\n            this.cap=data.success;\n            this.captcha();\n        },\n        err => {\n        },\n        () => {}\n        );\n    }\n\n    captcha(){\n        return this.cap == true ? null : { robot: true };\n    }\n\n    login() {\n\n        const val = this.form.value;\n\n        if (val.email && val.password) {\n\n            this.authService.login(val.email, val.password)\n                .subscribe(\n                    () => {\n                        this.successMessage=\"You have been successfully logged in\";\n                        this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n\n                        setTimeout(() => {\n                            this.router.navigateByUrl('welcome');\n                        }, 1500);\n                    },\n                    err => {\n                        this.errorMessage = err.error.error;\n                    }\n                );\n        }\n    }\n}\n","<head>    <script src=\"https://www.google.com/recaptcha/api.js?onload=grecaptchaCallback&amp;render=explicit\"></script>\n</head> \n<h1 class=\"naslov\">Login</h1>\n<div class=\"error-messages\">\n    <ng-container *ngFor=\"let error of error_messages.email\">\n      <label class=\"text-danger errors\" *ngIf=\"form.get('email').hasError(error.type) && (form.get('email').dirty || form.get('email').touched)\">\n          {{error.message }}\n      </label>\n    </ng-container>\n</div>\n<div class=\"error-messages\">\n    <ng-container *ngFor=\"let error of error_messages.password\">\n      <label class=\"text-danger errors\" *ngIf=\"form.get('password').hasError(error.type) && (form.get('password').dirty || form.get('password').touched)\">\n          {{error.message }}\n      </label>\n    </ng-container>\n</div>\n\n<form autocomplete=\"off\" novalidate [formGroup]=\"form\" class=\"form-center\">\n    <fieldset>\n      <div>\n          <re-captcha (resolved)=\"resolved($event)\" \n                      formControlName=\"recaptchaReactive\" \n                      siteKey=\"6LfePfAUAAAAAGa6FIBtAHMku9gAzvgwZsYD1cXu\">  \n          </re-captcha>\n      </div>\n      <div class=\"form-group\">\n          <label>Email:</label>\n          <input name=\"email\" formControlName=\"email\" class=\"form-control\">\n      </div>\n\n      <div class=\"form-group\">\n          <label>Password:</label>\n          <input name=\"password\" class=\"form-control\" formControlName=\"password\" type=\"password\" class=\"form-control\">\n      </div>\n\n  </fieldset>\n\n\n  <div class=\"form-buttons\">\n    <button class=\"btn btn-dark\" [disabled]=\"!form.valid\" (click)=\"login()\">Login</button>\n  </div>\n\n\n</form>","import { Component, OnInit, SecurityContext } from '@angular/core';\nimport { User } from 'src/app/_models/user';\nimport { Observable } from 'rxjs';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MessageService } from 'src/app/_services/message.service';\nimport { TransactionService } from 'src/app/_services/transaction.service';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-add-message',\n  templateUrl: './add-message.component.html',\n  styleUrls: ['./add-message.component.css']\n})\nexport class AddMessageComponent implements OnInit {\n\n  \n  users$: Observable<User[]>;\n  form:FormGroup;\n  errorMessage:string;\n  successMessage:string;\n\n  constructor(private fb:FormBuilder, private messageService: MessageService, private router: Router,\n    private transactionService:TransactionService,private sanitizer:DomSanitizer, private authService:AuthService,public toasterService: ToastrService) {\n    \n    this.form = this.fb.group({\n      content: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(300)\n      ])),\n      receiverEmail: new FormControl('', Validators.compose([\n        Validators.required,\n      ])),\n    },);\n  }\n\n  ngOnInit(): void {\n    this.users$ = this.authService.getAllUsers();\n  }\n\n  sendMessage() {\n    const val = this.form.value;\n\n    if (val.content && val.receiverEmail) {\n\n        this.messageService.addMessage(val.content, val.receiverEmail)\n            .subscribe(\n              () => {\n                  this.successMessage=\"Message has been sent\";\n                  this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n                  setTimeout(() => {\n                      this.router.navigateByUrl(`messages`);\n                  }, 1500);\n              },\n              err => {\n                  this.errorMessage = err.error.error;\n              }\n          );\n    }\n  }\n\n}\n","<h1 class=\"naslov\">New message</h1>\n\n<form autocomplete=\"off\" novalidate [formGroup]=\"form\" class=\"form-center\">\n  <fieldset>\n      <div class=\"form-field\" >\n          <label>Receiver:</label>\n          <select id=\"receiverEmail\" class=\"form-control\" name=\"receiverEmail\" formControlName=\"receiverEmail\" required >\n              <option *ngFor=\"let user of users$ | async\" [ngValue]=\"user.email\">\n                  {{ user.firstName }} {{user.lastName}}\n              </option>\n          </select>\n      </div>\n      <div class=\"form-field\">\n          <label>Content:</label>\n          <textarea type=\"text\" class=\"form-control\" name=\"content\" formControlName=\"content\" required maxlength=\"300\"></textarea>\n      </div>\n  </fieldset>\n\n  <div class=\"form-buttons\">\n      <button class=\"btn btn-dark\" [disabled]=\"form.invalid\" (click)=\"sendMessage()\"> Send</button>\n  </div>\n\n</form>","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from '../../_models/user';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { Message } from '@angular/compiler/src/i18n/i18n_ast';\nimport { Router } from '@angular/router';\nimport { MessageService } from 'src/app/_services/message.service';\nimport { DomSanitizer, SafeResourceUrl, SafeUrl, SafeHtml } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n\n  messages$: Observable<Message[]>;\n  loggedUser$: Observable<User>;\n  content:string;\n  message1:SafeUrl;\n  message2:SafeHtml;\n  message3:SafeHtml;\n  contents:SafeHtml[]=[];\n  session:string;\n\n  constructor(private messageService: MessageService, private router: Router, private authService: AuthService, private sanitizer:DomSanitizer) {    \n      this.messages$=this.messageService.getMessages();\n      this.loggedUser$=this.authService.user$;\n  }\n\n  desanitizeURL(text:string):SafeUrl {\n    return this.sanitizer.bypassSecurityTrustUrl(text);\n  }\n\n  ngOnInit(): void {\n    this.messages$=this.messageService.getMessages();\n    this.loggedUser$=this.authService.user$;\n    \n  }\n}","<div>\n    <h1 class=\"naslov\">Messages</h1>\n    <button routerLink=\"/messages/add\" class=\"btn btn-dark btn-center\">\n        New message\n    </button>\n</div>\n\n<div class=\"lessons-list-container v-h-center-block-parent\" *ngIf=\"(messages$ | async)\" > \n    <table class=\"table lessons-list card card-strong \">\n        <tbody>\n        <tr *ngFor=\"let p of messages$ | async;\" >\n            <td class=\"lesson-title mess\"> <b>Sender</b><br>{{p.sender.firstName}} {{p.sender.lastName}} </td>\n            <td class=\"lesson-title mess\"> <b>Receiver</b><br>{{p.receiver.firstName}} {{p.receiver.lastName}} </td>\n            <td class=\"mess\"> <b>Date</b><br>{{p.date}} </td>\n            <td class=\"message-content\" [innerHtml]=\"p.content\"></td>\n        </tr>\n        </tbody>\n    </table>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Photographer } from 'src/app/_models/photographer';\nimport { Observable } from 'rxjs';\nimport { PhotographService } from 'src/app/_services/photograph.service';\nimport { Router } from '@angular/router';\nimport { PhotographerService } from 'src/app/_services/photographerService';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-add-photograph',\n  templateUrl: './add-photograph.component.html',\n  styleUrls: ['./add-photograph.component.css']\n})\nexport class AddPhotographComponent implements OnInit {\n\n  \n  photographers$: Observable<Photographer[]>;\n  form:FormGroup;\n  errorMessage:string;\n  successMessage:string;\n\n  error_messages = {\n    'name': [\n      { type: 'maxlength', message: 'Input cannot be more than 50 characters long' },\n    ],\n    'year': [\n      { type: 'max', message: 'Year must be between 1800 and 2020' },\n      { type: 'min', message: 'Year must be between 1800 and 2020' },\n    ]\n  };\n\n  constructor(private fb:FormBuilder, private photographService: PhotographService,\n    private photographerService: PhotographerService, private router: Router,public toasterService: ToastrService) {\n\n    this.form = this.fb.group({\n      year: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.min(1800),\n        Validators.max(2020),\n      ])),\n      price: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.min(1),\n      ])),\n      name: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50)\n      ])),\n      photographerId: new FormControl('', Validators.compose([\n        Validators.required,\n      ])),\n    },);\n  }\n\n  ngOnInit(): void {\n    this.photographers$ = this.photographerService.getPhotographers();\n  }\n\n  createPhotograph() {\n    const val = this.form.value;\n\n    if (val.name && val.photographerId && val.year && val.price) {\n\n        this.photographService.addPhotograph(val.name,val.photographerId,val.year,val.price)\n            .subscribe(\n              () => {\n                  this.successMessage=\"Photograph has been created\";\n                  this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n                  setTimeout(() => {\n                      this.router.navigateByUrl(`/photographs`);\n                  }, 1500);\n              },\n              err => {\n                  this.errorMessage = err.error.error;\n              }\n          );\n\n    }\n  }\n}\n","<h1 class=\"naslov\">New photograph</h1>\n\n<ng-container *ngFor=\"let error of error_messages.name\" >\n    <label class=\"text-danger errors\" *ngIf=\"form.get('name').hasError(error.type) && (form.get('name').dirty || form.get('name').touched)\">\n        {{error.message }}\n    </label>\n</ng-container>\n\n<ng-container *ngFor=\"let error of error_messages.year\" class=\"errors\">\n    <label class=\"text-danger errors\" *ngIf=\"form.get('year').hasError(error.type) && (form.get('year').dirty || form.get('year').touched)\">\n      {{error.message }}\n    </label>\n</ng-container>\n\n<form autocomplete=\"off\" novalidate [formGroup]=\"form\" class=\"form-center\">\n    <fieldset>\n        <div class=\"form-group\">\n            <label>Name:</label>\n            <input class=\"form-control\" formControlName=\"name\" type=\"text\"  required/>\n        </div>\n        <div class=\"form-field\" >\n            <label>Photographer:</label>\n            <select id=\"photographerId\" class=\"form-control\" name=\"photographerId\" formControlName=\"photographerId\" required >\n                <option *ngFor=\"let p of photographers$ | async\" [ngValue]=\"p.id\">\n                    {{ p.firstName }} {{ p.lastName }}\n                </option>\n            </select>\n        </div>\n        <div class=\"form-field\">\n            <label>Year:</label>\n            <input type=\"number\" class=\"form-control\" name=\"year\" formControlName=\"year\" required>\n        </div>\n        <div class=\"form-field\">\n            <label>Price:</label>\n            <input type=\"number\" class=\"form-control\" name=\"price\" formControlName=\"price\" required>\n        </div>\n    </fieldset>\n\n    <div class=\"form-buttons\">\n        <button class=\"btn btn-dark\" [disabled]=\"!form.valid\" (click)=\"createPhotograph()\">Save</button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router, ParamMap } from '@angular/router';\nimport { PhotographerService } from 'src/app/_services/photographerService';\nimport { PhotographService } from 'src/app/_services/photograph.service';\nimport { Photograph } from 'src/app/_models/photograph';\nimport { switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Photographer } from 'src/app/_models/photographer';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-edit-photograph',\n  templateUrl: './edit-photograph.component.html',\n  styleUrls: ['./edit-photograph.component.css']\n})\nexport class EditPhotographComponent implements OnInit {\n\n  private photographId: number;\n  photographers$: Observable<Photographer[]>;\n  photograph:Photograph;\n  form:FormGroup;\n  errorMessage:string;\n  successMessage:string;\n\n  error_messages = {\n    'name': [\n      { type: 'maxlength', message: 'Input cannot be more than 50 characters long' },\n    ],\n    'year': [\n      { type: 'max', message: 'Year must be between 1800 and 2020' },\n      { type: 'min', message: 'Year must be between 1800 and 2020' },\n    ]\n  };\n\n constructor(private route: ActivatedRoute,private fb:FormBuilder, \n   private photographerService:PhotographerService,private photographService:PhotographService, private router: Router,public toasterService: ToastrService) {\n     \n    this.form = this.fb.group({\n      year: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.min(1800),\n        Validators.max(2020),\n      ])),\n      price: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.min(1),\n      ])),\n      name: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50)\n      ])),\n      photographerId: new FormControl('', Validators.compose([\n        Validators.required,\n      ])),\n    },);\n  }\n\n \n ngOnInit() {\n   this.route.paramMap\n     .pipe(switchMap((params: ParamMap) => params.get(\"id\")))\n     .subscribe(id => {\n       this.photographId = parseInt(id, 10);\n       this.load();\n       this.photographers$ = this.photographerService.getPhotographers();\n     });\n }\n\n load(onlyTasks: boolean = false) {\n   this.photographService.getPhotograph(this.photographId).subscribe(a => {\n       this.photograph = {\n         id : a.id,\n         name:a.name,\n         year : a.year,\n         photoLink : a.photoLink,\n         photographer:null,\n         photographerId:a.photographerId,\n         price:a.price,\n         userId:null\n       };\n   });\n }\n\n editPhotograph(){\n   const val = this.form.value;\n\n   if (val.name && val.photographerId && val.year && val.price) {\n       this.photographService.editPhotograph(this.photographId, val.name , val.photographerId , val.year , val.price)\n           .subscribe(\n            () => {\n                this.successMessage=\"Photograph has been edited\";\n                this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n                setTimeout(() => {\n                    this.router.navigateByUrl(`admin/photographs`);\n                }, 1500);\n            },\n            err => {\n                this.errorMessage = err.error.error;\n            }\n        );\n\n   }\n }\n\n}\n","<h1 class=\"naslov\">Edit photograph</h1>\n<ng-container *ngFor=\"let error of error_messages.name\" class=\"errors\">\n    <label class=\"text-danger errors\" *ngIf=\"form.get('name').hasError(error.type) && (form.get('name').dirty || form.get('name').touched)\">\n        {{error.message }}\n    </label>\n</ng-container>\n\n<ng-container *ngFor=\"let error of error_messages.year\" class=\"errors\">\n    <label class=\"text-danger errors\" *ngIf=\"form.get('year').hasError(error.type) && (form.get('year').dirty || form.get('year').touched)\">\n      {{error.message }}\n    </label>\n</ng-container>\n\n<form autocomplete=\"off\" novalidate [formGroup]=\"form\" *ngIf=\"photograph\" class=\"form-center\">\n    <fieldset>\n        <div class=\"form-group\">\n            <label>Name:</label>\n            <input class=\"form-control\" formControlName=\"name\" type=\"text\" [(ngModel)]=\"photograph.name\" required />\n        </div>\n        <div class=\"form-field\" >\n            <label>Photographer:</label>\n            <select id=\"photographerId\" class=\"form-control\" name=\"photographerId\" formControlName=\"photographerId\" [(ngModel)]=\"photograph.photographerId\" required>\n                <option *ngFor=\"let p of photographers$ | async\" [ngValue]=\"p.id\">\n                    {{ p.firstName }} {{ p.lastName }}\n                </option>\n            </select>\n        </div>\n        <div class=\"form-field\">\n            <label>Year:</label>\n            <input type=\"number\" class=\"form-control\" name=\"year\" formControlName=\"year\" [(ngModel)]=\"photograph.year\" required >\n        </div>\n        <div class=\"form-field\">\n            <label>Price:</label>\n            <input type=\"number\" class=\"form-control\" name=\"price\" formControlName=\"price\" [(ngModel)]=\"photograph.price\" required>\n        </div>\n    </fieldset>\n\n    <div class=\"form-buttons\">\n        <button class=\"btn btn-dark\" [disabled]=\"!form.valid\" (click)=\"editPhotograph()\">Save</button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { PhotographService } from 'src/app/_services/photograph.service';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { Photograph } from 'src/app/_models/photograph';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-my-photographs',\n  templateUrl: './my-photographs.component.html',\n  styleUrls: ['./my-photographs.component.css']\n})\nexport class MyPhotographsComponent implements OnInit {\n\n  photos$: Observable<Photograph[]>;\n  errorMessage:string;\n  successMessage:string;\n\n  constructor(private photographService: PhotographService, private authService: AuthService,private router:Router,public toasterService: ToastrService) {}\n\n  ngOnInit(): void {\n    this.photos$=this.photographService.getMyPhotographs();\n  }\n\n  sellPhotograph(id:number){\n    this.photographService.sellPhotograph(id).\n    subscribe(\n      () => {\n          this.successMessage=\"Photograph has been sold\";\n          this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n          location.reload(true);\n          if (this.photographService.getMyPhotographs() == null){\n            this.photos$=null;\n          }else{\n            this.photos$=this.photographService.getMyPhotographs();\n          }\n      },\n      err => {\n          this.errorMessage = err.error.error;\n      }\n    );\n  }\n\n}\n","<h2 *ngIf=\"!(photos$ | async)\" class=\"naslov\">You currently don't own any photographs..</h2>\n\n<div class=\"lessons-list-container v-h-center-block-parent\" *ngIf=\"(photos$ | async)\" >\n\n    <div>\n        <h1 class=\"naslov\">My Photographs</h1>\n \n    <table class=\"table lessons-list card card-strong\">\n        <tbody>\n        <tr *ngFor=\"let p of photos$ | async\" >\n            <td class=\"title\"> \n                {{p.name}}, {{p.year}}\n            </td>\n            <td class=\"title\"> \n               {{p.photographer.firstName}} {{p.photographer.lastName}} ({{p.photographer.age}})\n            </td>\n            <td class=\"title\"> \n                {{p.price}}$\n            </td>\n            <td class=\"photo\">\n                <a  href=\"{{p.photoLink}}\" target=\"_blank\">\n                    <img src=\"../../../assets/photos/{{p.photoLink}}\" alt=\"photo\" height=\"130\" width=\"160\">\n                </a>\n            </td>\n            <button type=\"button\" class=\"btn btn-dark\" *ngIf=\"p.userId\" (click)=\"sellPhotograph(p.id)\">\n                Sell\n            </button>\n        </tr>\n        </tbody>\n    </table>\n    \n    \n    </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Photograph } from 'src/app/_models/photograph';\nimport { PhotographService } from 'src/app/_services/photograph.service';\nimport { AuthService } from 'src/app/_services/auth.service';\nimport { User } from '../../_models/user';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-photographs',\n  templateUrl: './photographs.component.html',\n  styleUrls: ['./photographs.component.css']\n})\nexport class PhotographsComponent  implements OnInit {\n\n  photos$: Observable<Photograph[]>;\n  loggedUser$: Observable<User>\n  form:FormGroup;\n  form2:FormGroup;\n  response:any;\n  errorMessage:string;\n  successMessage:string;\n\n  error_messages = {\n    'ipaddress': [\n      { type: 'maxlength', message: 'Ip address must be beetween 7 and 15 characters long' },\n      { type: 'minlength', message: 'Ip address must be beetween 7 and 15 characters long' },\n      { type: 'pattern', message: 'That is not a valid ip address' },\n    ]\n  };\n\n  constructor(private photographService: PhotographService, private router: Router, \n    private authService: AuthService,private fb:FormBuilder,public toasterService: ToastrService) {\n      this.form = this.fb.group({\n        ipaddress: new FormControl('', Validators.compose([\n          Validators.required,\n        ]))\n      },);\n  }\n\n  ngOnInit(): void {\n    this.photos$=this.photographService.getPhotographs();\n    this.loggedUser$=this.authService.user$;\n  }\n\n  deletePhotograph(id:number){\n    this.photographService.deletePhotograph(id).subscribe(\n      () => {\n          this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n          if (this.photographService.getPhotographs() == null){\n            this.photos$=null;\n          }else{\n            this.photos$=this.photographService.getPhotographs();\n          }                  \n        },err => {\n          this.errorMessage = err.error.error;\n      }\n    );\n  }\n\n  buyPhotograph(id:number){\n    this.photographService.buyPhotograph(id)\n    .subscribe(\n      () => {\n          this.successMessage=\"Photograph has been bought\";\n          this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n          setTimeout(() => {\n            location.reload(true);\n          }, 1500);\n      },\n      err => {\n          this.errorMessage = err.error.error;\n      }\n    );    \n  }\n\n  sellPhotograph(id:number){\n    this.photographService.sellPhotograph(id).subscribe(\n      () => {\n          this.successMessage=\"Photograph has been sold\";\n          this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n          setTimeout(() => {\n            location.reload(true);\n          }, 1500);\n      },\n      err => {\n          this.errorMessage = err.error.error;\n      }\n    );\n  }\n\n  ping(){\n    const val = this.form.value;\n\n    if (val.ipaddress) {\n      this.photographService.ping(val.ipaddress).subscribe(\n        (resp) => {\n            this.response = resp;\n        }\n      );\n    }\n  }\n}\n\n","<div class=\"lessons-list-container v-h-center-block-parent\" *ngIf=\"(photos$ | async)\" >\n\n    <h1 class=\"naslov\">Photographs</h1>\n    <button routerLink=\"/photographs/add\" class=\"btn btn-dark btn-center\" *rbacAllow=\"['ADMIN']\">\n        New photograph\n    </button>\n  \n    <table class=\"table lessons-list card card-strong\">\n        <tbody>\n        <tr *ngFor=\"let p of photos$ | async\" >\n            <td class=\"title\"> \n                <b>{{p.name}}</b>, {{p.year}}\n            </td>\n            <td class=\"title\"> \n               {{p.photographer.firstName}} {{p.photographer.lastName}} ({{p.photographer.age}})\n            </td>\n            <td class=\"title\"> \n                {{p.price}}$\n            </td>\n            <td class=\"photo\">\n                <a  href=\"{{p.photoLink}}\" target=\"_blank\">\n                    <img src=\"../../../assets/photos/{{p.photoLink}}\" alt=\"photo\" height=\"130\" width=\"160\">\n                </a>\n            </td>\n            <div *rbacAllow=\"['ADMIN']\">\n                <button type=\"button\" class=\"btn btn-warning\" routerLink=\"/photographs/{{p.id}}\">\n                    Edit\n                </button>\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"deletePhotograph(p.id)\">\n                    Delete \n                </button>\n            </div>\n            \n            <div *rbacAllow=\"['USER']\">\n                <button type=\"button\" class=\"btn btn-light\" *ngIf=\"!p.userId\" (click)=\"buyPhotograph(p.id)\" >\n                    Buy\n                </button>\n                <button type=\"button\" class=\"btn btn-dark\" *ngIf=\"p.userId === (loggedUser$ | async).id\" (click)=\"sellPhotograph(p.id)\">\n                    Sell\n                </button>\n            </div>\n            \n        </tr>\n        </tbody>\n    </table>    \n</div>\n\n\n\n<div *rbacAllow=\"['USER']\">\n    <h2>Bored of photographs?</h2>\n    <div class=\"ipsearch\">\n        <h3>Ping an address to waste time</h3>\n        <form novalidate [formGroup]=\"form\">\n            <div class=\"form-group\">\n                <input class=\"form-control search\" formControlName=\"ipaddress\" type=\"text\" placeholder=\"IPv4 address\"\n                    required minlength=\"7\" maxlength=\"15\" pattern=\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"/>\n            </div>\n            <div class=\"form-buttons\">\n                <button class=\"btn btn-dark src-btn\" [disabled]=\"!form.valid\" (click)=\"ping()\">Ping it!</button>\n             </div>\n        </form> \n        <div *ngIf=\"response\" class=\"ipresponse\">\n            {{response.response}}\n        </div>\n    </div>\n</div>\n<ng-container *ngFor=\"let error of error_messages.ipaddress\" >\n    <label class=\"text-danger errors\" *ngIf=\"form.get('ipaddress').hasError(error.type) && (form.get('ipaddress').dirty || form.get('ipaddress').touched)\">\n        {{error.message }}\n    </label>\n</ng-container>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PhotographerService } from '../../_services/photographerService';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-add-photographer',\n  templateUrl: './add-photographer.component.html',\n  styleUrls: ['./add-photographer.component.css']\n})\nexport class AddPhotographerComponent implements OnInit {\n\n  form:FormGroup;\n  errorMessage:string;\n  successMessage:string;\n\n  error_messages = {\n    'firstName': [\n      { type: 'maxlength', message: 'Input cannot be more than 30 characters long' },\n    ],\n    'lastName': [\n      { type: 'maxlength', message: 'Input cannot be more than 30 characters long' },\n    ],\n    'age': [\n      { type: 'max', message: 'Age must be between 18 and 100' },\n      { type: 'min', message: 'Age must be between 18 and 100' },\n\n    ]\n  };\n  \n  constructor(private fb:FormBuilder, private photographerService:PhotographerService, private router: Router,public toasterService: ToastrService) {\n    this.form = this.fb.group({\n      firstName: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(30),\n      ])),\n      lastName: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(30),\n      ])),\n      age: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.min(18),\n        Validators.max(100)\n      ])),\n    },);\n   }\n\n  ngOnInit(): void {\n  }\n\n  createPhotographer(){\n    const val = this.form.value;\n\n    if (val.firstName && val.lastName && val.age) {\n        this.photographerService.addPhotographer(val.firstName,val.lastName,val.age)\n            .subscribe(\n              () => {\n                  this.successMessage=\"Photographer has been created\";\n                  this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n                  setTimeout(() => {\n                      this.router.navigateByUrl(`photographers`);\n                  }, 1500);\n              },\n              err => {\n                  this.errorMessage = err.error.error;\n              }\n          );\n\n    }\n  }\n\n}\n","\n<h1 class=\"naslov\">new Photographer</h1>\n\n<ng-container *ngFor=\"let error of error_messages.firstName\" >\n  <label class=\"text-danger errors\" *ngIf=\"form.get('firstName').hasError(error.type) && (form.get('firstName').dirty || form.get('firstName').touched)\">\n      {{error.message }}\n  </label>\n</ng-container>\n<ng-container *ngFor=\"let error of error_messages.lastName\" >\n  <label class=\"text-danger errors\" *ngIf=\"form.get('lastName').hasError(error.type) && (form.get('lastName').dirty || form.get('lastName').touched)\">\n      {{error.message }}\n  </label>\n</ng-container>\n<ng-container *ngFor=\"let error of error_messages.age\" >\n  <label class=\"text-danger errors\" *ngIf=\"form.get('age').hasError(error.type) && (form.get('age').dirty || form.get('age').touched)\">\n      {{error.message }}\n  </label>\n</ng-container>\n\n<form autocomplete=\"off\" novalidate [formGroup]=\"form\" class=\"form-center\">\n    <fieldset>\n        <div class=\"form-group\">\n            <label>First Name:</label>\n            <input class=\"form-control\" formControlName=\"firstName\" type=\"text\" required />\n        </div>\n        <div class=\"form-field\">\n            <label>Last Name:</label>\n            <input class=\"form-control\" formControlName=\"lastName\" type=\"text\" required/>\n        </div>\n        <div class=\"form-field\">\n            <label>Age</label>\n            <input  class=\"form-control\" type=\"number\" name=\"age\" formControlName=\"age\" required>\n        </div>\n    </fieldset>\n\n    <div class=\"form-buttons\">\n        <button class=\"btn btn-dark\" [disabled]=\"!form.valid\" (click)=\"createPhotographer()\">Save</button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { PhotographerService } from 'src/app/_services/photographerService';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { switchMap } from 'rxjs/operators';\nimport { Photographer } from 'src/app/_models/photographer';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-edit-photographer',\n  templateUrl: './edit-photographer.component.html',\n  styleUrls: ['./edit-photographer.component.css']\n})\nexport class EditPhotographerComponent implements OnInit {\n\n  private photographerId: number;\n  photographer:Photographer;\n  form:FormGroup;\n  errorMessage:string;\n  successMessage:string;\n\n  error_messages = {\n    'firstName': [\n      { type: 'maxlength', message: 'Input cannot be more than 30 characters long' },\n    ],\n    'lastName': [\n      { type: 'maxlength', message: 'Input cannot be more than 30 characters long' },\n    ],\n    'age': [\n      { type: 'max', message: 'Age must be between 18 and 100' },\n      { type: 'min', message: 'Age must be between 18 and 100' },\n\n    ]\n  };\n\n  constructor(private route: ActivatedRoute,private fb:FormBuilder, private photographerService:PhotographerService, \n    private router: Router,public toasterService: ToastrService) {\n    this.form = this.fb.group({\n      firstName: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(30),\n      ])),\n      lastName: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(30),\n      ])),\n      age: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.min(18),\n        Validators.max(100)\n      ])),\n    },);\n   }\n\n  \n  ngOnInit() {\n    this.route.paramMap\n      .pipe(switchMap((params: ParamMap) => params.get(\"id\")))\n      .subscribe(id => {\n        this.photographerId = parseInt(id, 10);\n        this.load();\n      });\n  }\n\n  load(onlyTasks: boolean = false) {\n    this.photographerService.getPhotographer(this.photographerId).subscribe(a => {\n        this.photographer = {\n          id : a.id,\n          firstName : a.firstName,\n          lastName : a.lastName,\n          age : a.age\n        };\n    });\n  }\n\n  editPhotographer(){\n    const val = this.form.value;\n\n    if (val.firstName && val.lastName && val.age) {\n        this.photographerService.editPhotographer(this.photographerId, val.firstName,val.lastName,val.age)\n        .subscribe(\n          () => {\n              this.successMessage=\"Photographer has been edited\";\n              this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n              setTimeout(() => {\n                  this.router.navigateByUrl(`photographers`);\n              }, 1500);\n          },\n          err => {\n              this.errorMessage = err.error.error;\n          }\n      );\n\n    }\n  }\n\n\n}\n","\n<h1 class=\"naslov\">Edit photographer</h1>\n\n<ng-container *ngFor=\"let error of error_messages.firstName\" >\n  <label class=\"text-danger errors\" *ngIf=\"form.get('firstName').hasError(error.type) && (form.get('firstName').dirty || form.get('firstName').touched)\">\n      {{error.message }}\n  </label>\n</ng-container>\n<ng-container *ngFor=\"let error of error_messages.lastName\" >\n  <label class=\"text-danger errors\" *ngIf=\"form.get('lastName').hasError(error.type) && (form.get('lastName').dirty || form.get('lastName').touched)\">\n      {{error.message }}\n  </label>\n</ng-container>\n<ng-container *ngFor=\"let error of error_messages.age\" >\n  <label class=\"text-danger errors\" *ngIf=\"form.get('age').hasError(error.type) && (form.get('age').dirty || form.get('age').touched)\">\n      {{error.message }}\n  </label>\n</ng-container>\n\n<form autocomplete=\"off\" novalidate [formGroup]=\"form\" *ngIf=\"photographer\" class=\"form-center\">\n    <fieldset>\n        <div class=\"form-group\">\n            <label>First Name:</label>\n            <input class=\"form-control\" formControlName=\"firstName\" type=\"text\" [(ngModel)]=\"photographer.firstName\" required/>\n        </div>\n        <div class=\"form-field\">\n            <label>Last Name:</label>\n            <input class=\"form-control\" formControlName=\"lastName\" type=\"text\" [(ngModel)]=\"photographer.lastName\" required/>\n        </div>\n        <div class=\"form-field\">\n            <label>Age</label>\n            <input type=\"number\" class=\"form-control\" name=\"age\" formControlName=\"age\" [(ngModel)]=\"photographer.age\" required>\n        </div>\n    </fieldset>\n\n    <div class=\"form-buttons\">\n        <button class=\"btn btn-dark\" [disabled]=\"!form.valid\" (click)=\"editPhotographer()\" >Save</button>\n    </div>\n</form>","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Photographer } from '../../_models/photographer';\nimport { PhotographerService } from '../../_services/photographerService';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-photographers',\n  templateUrl: './photographers.component.html',\n  styleUrls: ['./photographers.component.css']\n})\nexport class PhotographersComponent implements OnInit {\n\n  photographers$: Observable<Photographer[]>;\n  errorMessage:string;\n  successMessage:string;\n\n  constructor(private photographerService: PhotographerService, private router: Router,public toasterService: ToastrService) {\n  }\n\n  ngOnInit(): void {\n    this.photographers$=this.photographerService.getPhotographers();\n  }\n\n  deletePhotographer(id:number){\n    this.photographerService.deletePhotographer(id)\n    .subscribe(\n      () => {\n          this.successMessage=\"Photographer has been deleted\";\n          this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n          setTimeout(() => {\n            this.router.navigateByUrl(`photographers`);\n        }, 1500);\n      },\n      err => {\n          this.errorMessage = err.error.error;\n      }\n    );\n    this.photographers$=this.photographerService.getPhotographers();\n  }\n}\n","<div class=\"lessons-list-container v-h-center-block-parent\" *ngIf=\"(photographers$ | async)\" >\n\n    <div>\n        <h1 class=\"naslov\">Photographers</h1>\n        <button routerLink=\"/photographers/add\" class=\"btn btn-dark btn-center\">\n            New photographer\n        </button>\n    </div>\n\n    <table class=\"table lessons-list card card-strong\">\n        <tbody>\n        <tr *ngFor=\"let p of photographers$ | async\" >\n            <td class=\"lesson-title\"> <b>{{p.firstName}} {{p.lastName}}</b> <br> {{p.age}} years old </td>\n            <td class=\"lesson-title\">\n                <button routerLink=\"/photographers/{{p.id}}\" class=\"btn btn-warning\">\n                    Edit \n                </button>\n                <button class=\"btn btn-danger\" (click)=\"deletePhotographer(p.id)\">\n                    Delete \n                </button>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    \n    \n    </div>","import { Component, OnInit, SecurityContext } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators, FormControl} from \"@angular/forms\";\nimport {AuthService} from \"../_services/auth.service\";\nimport {Router} from \"@angular/router\";\nimport { DomSanitizer } from '@angular/platform-browser';\nimport {PasswordPolicy} from '../_common/password-policy';\nimport { ToastrService } from 'ngx-toastr';\n\n\n@Component({\n  selector: 'signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n    errorMessage:string;\n    successMessage:string;\n    public frmSignup: FormGroup; \n\n    constructor(private formBuilder: FormBuilder, private authService: AuthService,private router:Router,\n      private sanitizer:DomSanitizer,public toasterService: ToastrService) {\n      this.frmSignup = this.createSignupForm();\n    }\n\n    ngOnInit() {\n    }\n\n    submit() {\n        const val = this.frmSignup.value;\n\n        if (val.email && val.firstName && val.lastName && val.password && val.password === val.confirmPassword) {\n\n          this.authService.signUp(val.email, val.password,val.firstName,val.lastName,val.profileLink)\n          .subscribe(\n            () => {\n                this.successMessage=\"You have successfully signed in\";\n                this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n                setTimeout(() => {\n                  this.router.navigateByUrl('welcome');\n                }, 1500);\n            },\n            err => {\n                this.errorMessage = err.error.error;\n            }\n        );\n\n        }\n        \n    }\n\n    createSignupForm(): FormGroup {\n      return this.formBuilder.group(\n        {\n          profileLink:[null,Validators.compose([\n            Validators.minLength(30),\n            Validators.maxLength(60),\n            Validators.pattern(\"http://localhost:8081/secure/[a-zA-Z.-]{2,}[.]{1}html\"),\n          ])],\n          firstName:[null,Validators.compose([\n            Validators.required,\n            Validators.minLength(1),\n            Validators.maxLength(30),\n          ])],\n          lastName:[null,Validators.compose([\n            Validators.required,\n            Validators.minLength(1),\n            Validators.maxLength(30),\n          ])],\n          email: [\n            null,\n            Validators.compose([\n              Validators.email, \n              Validators.required,\n              Validators.pattern(\"[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}\"),\n              Validators.minLength(6),\n              Validators.maxLength(30),\n            ])\n          ],\n          password: [\n            null,\n            Validators.compose([\n              Validators.required,\n              // check whether the entered password has a number\n              PasswordPolicy.patternValidator(/\\d/, {\n                hasNumber: true\n              }),\n              // check whether the entered password has upper case letter\n              PasswordPolicy.patternValidator(/[A-Z]/, {\n                hasCapitalCase: true\n              }),\n              // check whether the entered password has a lower case letter\n              PasswordPolicy.patternValidator(/[a-z]/, {\n                hasSmallCase: true\n              }),\n              PasswordPolicy.checkTop1000({\n                goodPass: true\n              }),\n              Validators.minLength(8),\n              Validators.maxLength(30)\n            ])\n          ],\n          confirmPassword: [null, Validators.compose([Validators.required])]\n        },\n        {\n          // check whether our password and confirm password match\n          validator: PasswordPolicy.passwordMatchValidator\n        }\n      );\n    }\n\n}\n","\n<h1 class=\"naslov\">Sign Up</h1>\n\n          <form [formGroup]=\"frmSignup\" (submit)=\"submit()\" autocomplete=\"off\" class=\"form-center\">\n            <div class=\"form-group\">\n                <label for=\"firstName\">First name</label>\n                <input id=\"firstName\" formControlName=\"firstName\" type=\"firstName\" class=\"form-control\" [ngClass]=\"frmSignup.controls['firstName'].invalid ? 'is-invalid' : ''\">\n                <label class=\"text-danger\" *ngIf=\"frmSignup.controls['firstName'].hasError('firstName')\">\n                  Name cannot be longer than 30 characters long\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"lastName\">Last name</label>\n                <input id=\"lastName\" formControlName=\"lastName\" type=\"lastName\" class=\"form-control\" [ngClass]=\"frmSignup.controls['lastName'].invalid ? 'is-invalid' : ''\">\n                <label class=\"text-danger\" *ngIf=\"frmSignup.controls['lastName'].hasError('lastName')\">\n                  Last name cannot be longer than 30 characters long\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"profileLink\">Profile link on Secursy</label>\n                <input onchange=\"\" placeholder=\"Optional..\" id=\"profileLink\" formControlName=\"profileLink\" type=\"profileLink\" class=\"form-control\" [ngClass]=\"frmSignup.controls['profileLink'].invalid ? 'is-invalid' : ''\">\n                <label class=\"text-danger\" *ngIf=\"frmSignup.controls['profileLink'].hasError('profileLink')\">\n                  That is not a valid Secursy profile link!\n                </label>\n              </div>\n            <div class=\"form-group\">\n              <label for=\"email\">Email Address</label>\n              <input id=\"email\" formControlName=\"email\" type=\"email\" class=\"form-control\" [ngClass]=\"frmSignup.controls['email'].invalid ? 'is-invalid' : ''\">\n              <label class=\"text-danger\" *ngIf=\"frmSignup.controls['email'].hasError('email')\">\n                That is not a valid email address!\n              </label>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"password\">Password</label>\n              <input id=\"password\" formControlName=\"password\" type=\"password\" class=\"form-control\" [ngClass]=\"frmSignup.controls['password'].invalid ? 'is-invalid' : ''\">\n              <!-- <label class=\"text-danger col\" *ngIf=\"frmSignup.controls['password'].hasError('required')\">\n                Password is Required!\n              </label> -->\n              <label class=\"col\" [ngClass]=\"frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('minlength')  ? 'text-danger' : 'text-success'\">\n                <i class=\"material-icons\">{{ frmSignup.controls['password'].hasError('required') ||\n                  frmSignup.controls['password'].hasError('minlength') ? 'cancel' :\n                  'check_circle' }}</i>\n                Must be at least 8 characters!\n              </label>\n              <label class=\"col\" [ngClass]=\"frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('hasNumber')  ? 'text-danger' : 'text-success'\">\n                <i class=\"material-icons\">{{ frmSignup.controls['password'].hasError('required') ||\n                  frmSignup.controls['password'].hasError('hasNumber') ? 'cancel' :\n                  'check_circle' }}</i>\n                Must contain at least 1 number!\n              </label>\n              <label class=\"col\" [ngClass]=\"frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('hasCapitalCase')  ? 'text-danger' : 'text-success'\">\n                <i class=\"material-icons\">{{ frmSignup.controls['password'].hasError('required') ||\n                  frmSignup.controls['password'].hasError('hasCapitalCase') ? 'cancel' :\n                  'check_circle' }}</i>\n                Must contain at least 1 in Capital Case!\n              </label>\n              <label class=\"col\" [ngClass]=\"frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('hasSmallCase')  ? 'text-danger' : 'text-success'\">\n                <i class=\"material-icons\">{{ frmSignup.controls['password'].hasError('required') ||\n                  frmSignup.controls['password'].hasError('hasSmallCase') ? 'cancel' :\n                  'check_circle' }}</i>\n                Must contain at least 1 Letter in Small Case!\n              </label>\n              <label class=\"col\" [ngClass]=\"frmSignup.controls['password'].hasError('required') || frmSignup.controls['password'].hasError('goodPass')  ? 'text-danger' : 'text-success'\">\n                <i class=\"material-icons\">{{ frmSignup.controls['password'].hasError('required') ||\n                  frmSignup.controls['password'].hasError('goodPass') ? 'cancel' :\n                  'check_circle' }}</i>\n                Must be secure!\n              </label>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"confirmPassword\" >Confirm\n                Password</label>\n              <input id=\"confirmPassword\" formControlName=\"confirmPassword\" type=\"password\" class=\"form-control\"\n                [ngClass]=\"frmSignup.controls['confirmPassword'].invalid ? 'is-invalid' : ''\">\n \n              <label class=\"text-danger\" *ngIf=\"frmSignup.controls['confirmPassword'].hasError('NoPassswordMatch')\">\n                Password do not match\n              </label>\n            </div>\n            <div class=\"form-buttons\">\n              <button [disabled]=\"frmSignup.invalid\" type=\"submit\" class=\"btn btn-dark\">Sign\n                up</button>\n            </div>\n          </form>\n\n\n  <style>\n      main {\n          width: 900px;\n      }\n  </style>","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from '../../_models/user';\nimport { FormBuilder, FormControl, Validators, FormGroup } from '@angular/forms';\nimport { TransactionService } from '../../_services/transaction.service';\nimport { Router } from '@angular/router';\nimport { Transaction } from '../../_models/transaction';\nimport { AuthService } from '../../_services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-add-transaction',\n  templateUrl: './add-transaction.component.html',\n  styleUrls: ['./add-transaction.component.css']\n})\nexport class AddTransactionComponent implements OnInit {\n\n  users$: Observable<User[]>;\n  form:FormGroup;\n  transaction:Transaction;\n\n  errorMessage:string;\n  successMessage:string;\n\n  error_messages = {\n    'amount': [\n      { type: 'max', message: 'Amount must be between $1 and $10 000' },\n      { type: 'min', message: 'Amount must be between $1 and $10 000' },\n\n    ],\n    'password': [\n      { type: 'minlength', message: 'Password length must be at least 8' },\n    ]\n  };\n\n  constructor(private fb:FormBuilder, private authService: AuthService, private router: Router,\n    private transactionService:TransactionService,public toasterService: ToastrService) {\n    \n    this.form = this.fb.group({\n      amount: new FormControl('', Validators.compose([\n        Validators.min(1),\n        Validators.max(10000),\n        Validators.required,\n      ])),\n      receiverEmail: new FormControl('', Validators.compose([\n        Validators.required,\n      ])),\n      password: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(8),\n        Validators.maxLength(30)\n      ]))\n    },);\n  }\n\n  ngOnInit(): void {\n    this.users$ = this.authService.getAllUsers();\n  }\n\n  sendMoney() { \n    const val = this.form.value;\n\n    if (val.amount && val.receiverEmail && val.password) {\n\n      this.transactionService.sendMoney(val.receiverEmail, val.amount,val.password)\n          .subscribe(\n              () => {\n                  this.successMessage=\"Money has been sent\";\n                  this.toasterService.success(this.successMessage, 'Success', { positionClass: 'toast-top-center' ,timeOut:5000});\n                  setTimeout(() => {\n                    this.router.navigateByUrl(`/transactions`);\n                  }, 1500);\n              },err => {\n                this.errorMessage = err.error.error;\n              }\n          );\n    }\n  }\n}\n","\n<h1 class=\"naslov\">New transaction</h1>\n\n<ng-container *ngFor=\"let error of error_messages.amount\" >\n    <label class=\"text-danger errors\" *ngIf=\"form.get('amount').hasError(error.type) && (form.get('amount').dirty || form.get('amount').touched)\">\n        {{error.message }}\n    </label>\n  </ng-container>\n  <ng-container *ngFor=\"let error of error_messages.password\" >\n    <label class=\"text-danger errors\" *ngIf=\"form.get('password').hasError(error.type) && (form.get('password').dirty || form.get('password').touched)\">\n        {{error.message }}\n    </label>\n  </ng-container>\n\n<form autocomplete=\"off\" novalidate [formGroup]=\"form\" class=\"form-center\">\n    <fieldset>\n        <div class=\"form-field\">\n            <label>Amount:</label>\n            <input class=\"form-control\" type=\"number\" name=\"amount\" formControlName=\"amount\" required>\n        </div>\n        <div class=\"form-field\" >\n            <label>Receiver:</label>\n            <select id=\"receiverEmail\" name=\"receiverEmail\"  class=\"form-control\"formControlName=\"receiverEmail\" required>\n                <option *ngFor=\"let user of users$ | async\" [ngValue]=\"user.email\">\n                    {{ user.firstName }}  {{ user.lastName }}\n                </option>\n            </select>\n        </div>\n        <div class=\"form-field\">\n            <label>Password:</label>\n            <input name=\"password\" class=\"form-control\" formControlName=\"password\" type=\"password\" required>\n        </div>\n    </fieldset>\n\n    <div class=\"form-buttons\">\n        <button class=\"btn btn-dark\" [disabled]=\"!form.valid\" (click)=\"sendMoney()\">Save</button>\n    </div>\n</form>","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from '../../_models/user';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../_services/auth.service';\nimport { Transaction } from '../../_models/transaction';\nimport { TransactionService } from '../../_services/transaction.service';\n\n\n@Component({\n  selector: 'app-mytransactions',\n  templateUrl: './mytransactions.component.html',\n  styleUrls: ['./mytransactions.component.css']\n})\nexport class MyTransactionsComponent implements OnInit {\n\n  user$: Observable<User>;\n  transactions$: Observable<Transaction[]>;\n\n  constructor(private authService: AuthService, private router: Router,private transactionService: TransactionService) {\n    this.user$ = this.authService.user$;\n    this.transactions$=this.transactionService.getTransactions();\n\n  }\n\n  ngOnInit(): void {\n    this.user$ = this.authService.user$;\n    this.transactions$=this.transactionService.getTransactions();\n  }\n}\n","<div>\n    <h1 class=\"naslov\">Transactions</h1>\n    <button routerLink=\"/transaction\" class=\"btn btn-dark btn-center\" *rbacAllow=\"['USER']\">\n        New transaction\n    </button>\n</div>\n\n<h2 *ngIf=\"!(transactions$ | async)\">You currently don't own any transactions..</h2>\n\n<div class=\"lessons-list-container v-h-center-block-parent\" *ngIf=\"(transactions$ | async)\">\n        <table class=\"table lessons-list card card-strong\">\n            <tbody>\n                <tr *ngFor=\"let transaction of transactions$ | async\" >\n                    <td class=\"lesson-title\"> <b>Amount</b><br>{{transaction.amount}}$ </td>\n                    <td class=\"lesson-title\"> <b>Sender</b><br>{{transaction.sender.email}} </td>\n                    <td class=\"lesson-title\"> <b>Receiver</b><br>{{transaction.receiver.email}} </td>\n                    <td class=\"lesson-description\"> <b>Date</b><br>{{transaction.date}} </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from '../_models/user';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { AuthService } from '../_services/auth.service';\nimport { SafeUrl, DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport {validSearch} from '../_common/user-search.validator';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n\n    users$: Observable<User[]>;\n    loggedUser$: Observable<User>\n    form:FormGroup;\n    profileLink:SafeUrl;\n\n    error_messages = {\n      'search': [\n        { type: 'maxlength', message: 'Input cannot be more than 25 characters long' },\n        { type: 'validSearch', message: 'Your input is not valid' }\n      ]\n    };\n  \n    constructor(private authService: AuthService,private fb:FormBuilder, private sanitizer:DomSanitizer,private router:Router) {\n\n      this.form = this.fb.group({\n        search: new FormControl('', Validators.compose([\n          Validators.required,\n          validSearch(),\n          Validators.maxLength(25),\n        ])),\n      },);\n  }\n  \n    ngOnInit(): void {\n      this.loggedUser$=this.authService.user$;\n      this.loggedUser$.subscribe(\n        (resp) => {\n            this.profileLink=this.sanitizer.bypassSecurityTrustUrl(resp.profileLink);\n            if (resp.email== 'admin@mail.hr'){\n              this.users$=this.authService.getAllUsers();\n            }\n        }\n      );\n    }\n  \n    search(){\n      const val = this.form.value;\n  \n      if (val.search) {\n        this.users$=this.authService.getUsers(val.search);\n      }\n    }\n  }\n\n","<head>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n</head>\n<h1 class=\"naslov\">Users</h1>\n\n<ng-container *ngFor=\"let error of error_messages.search\" class=\"errors\">\n    <label class=\"text-danger errors\" *ngIf=\"form.get('search').hasError(error.type) && (form.get('search').dirty || form.get('search').touched)\">\n        {{error.message }}\n    </label>\n</ng-container>\n\n<form [formGroup]=\"form\" class=\"form-center user_search\"> \n    <input type=\"text\" placeholder=\"Search..\" formControlName=\"search\" required class=\"form-control\">\n    <button type=\"submit\" [disabled]=\"!form.valid\" (click)=\"search()\"><i class=\"fa fa-search\"></i></button>\n</form>\n\n<div class=\"lessons-list-container v-h-center-block-parent\" *ngIf=\"!(users$ | async) && (loggedUser$ | async) && (loggedUser$ | async).role == 'USER'\">  \n    <table class=\"table lessons-list card card-strong search_card\">\n        <tbody>\n        <tr>\n            <td class=\"lesson-title mess\">\n                <b>{{(loggedUser$ | async).firstName}} {{(loggedUser$ | async).lastName}}</b>\n            </td>\n            <td class=\"lesson-title mess\"> <b>Email address</b><br>{{(loggedUser$ | async).email}} </td>\n            <td class=\"lesson-title mess\" *ngIf=\"(loggedUser$ | async).profileLink\"> <b>Profile on Secursy</b><br><a [href]=\"profileLink\"  target=\"_blank\">Click here</a></td>\n            <td class=\"lesson-title mess\"> <b>Money</b><br>{{(loggedUser$ | async).money}}$ </td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n\n<div class=\"lessons-list-container v-h-center-block-parent\" *ngIf=\"(users$ | async)\" >  \n        <table class=\"table lessons-list card card-strong search_card\">\n            <tbody>\n            <tr *ngFor=\"let p of users$ | async\" >\n                <td class=\"lesson-title mess\">\n                    <b>{{p.firstName}} {{p.lastName}}</b>\n                </td>\n                <td class=\"lesson-title mess\"> <b>Email address</b><br>{{p.email}} </td>\n                <td class=\"lesson-title mess\" *ngIf=\"p.profileLink\"> <b>Profile on Secursy</b><br><a [href]=\"profileLink\"  target=\"_blank\">Click here</a></td>\n                <td class=\"lesson-title mess\" *rbacAllow=\"['ADMIN']\"> <b>Money</b><br>{{p.money}}$ </td>\n            </tr>\n            </tbody>\n        </table>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.css']\n})\nexport class WelcomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"bgimg w3-display-container w3-animate-opacity w3-text-white bck\">\n    <div class=\"w3-display-middle\">\n      <h1 class=\"w3-jumbo w3-animate-top\" style=\"color: white; padding-top: 20px;\">Welcome to PhotographiusScope</h1>\n      <hr class=\"w3-border-grey\" style=\"margin:auto;width:40%\">\n      <h1 class=\"w3-jumbo w3-animate-top\" style=\"color: white; padding-top: 20px;\" *rbacAllow=\"['ADMIN']\">ADMIN</h1>\n\n    </div>\n  </div>\n  \n  <style>\n    .bgimg {\n      background-image:linear-gradient(rgba(0,0,0,0.7),rgba(0,0,0,0.7)), url(../../assets/photos/background1.jpg);\n      min-height: 100%;\n      background-position: center;\n      background-size: cover;\n    }\n\n    .bck {\n        height: 667px;\n        background-attachment: fixed;\n    }\n    </style>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}